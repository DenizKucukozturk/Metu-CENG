This packet belongs to Group 68
2259166 - Yavuz Selim Yesilyurt
2171916 - Gokhan San

It consists of two parts namely: Code and Report

Report Part contains plotter file used for plotting the graph, photos used in report and tex file of the report together with the report pdf file.

Code Part has 4 files in the "codes" folder: "source.py" "broker.py" , "destination.py" and "input.txt"

First of all, scripts in the "codes folder" needs to be deployed to their proper nodes on the network. Please note that, "input.txt" file needs to be deployed on s node.

Then on each node: "chmod +x <script_name>" command needs to be executed to make the script executable by user.

Afterwards, since nodes' time are not synchronized, we synchronize them with binding them to the same NTP server. 
Following command is used for this purpose:
	"sudo ntpdate -u pool.ntp.org"
	
	**This command needs to be executed on s, b and d nodes.

For configuration of network routers, following commands needs to be done on specified nodes:
	
	In broker node:
		sudo ip route add 10.10.3.0/24 via 10.10.2.2 dev <interface_to_r1>
		sudo ip route add 10.10.5.0/24 via 10.10.4.2 dev <interface_to_r2>

	In destination node:
		sudo ip route add 10.10.2.0/24 via 10.10.3.1 dev <interface_to_r1>
		sudo ip route add 10.10.4.0/24 via 10.10.5.1 dev <interface_to_r2>

	In router1 & router2 nodes:
		sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf


	Before above commands routing table of broker:
		default via 172.16.0.1 dev eth0 
		10.0.0.0/8 via 10.10.2.2 dev eth2 
		10.10.1.0/24 dev eth1  proto kernel  scope link  src 10.10.1.2 
		10.10.2.0/24 dev eth2  proto kernel  scope link  src 10.10.2.1 
		10.10.4.0/24 dev eth3  proto kernel  scope link  src 10.10.4.1 
		10.10.5.0/31 via 10.10.4.2 dev eth3 
		172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.1 

	After above commands routing table of broker: 
		default via 172.16.0.1 dev eth0 
		10.0.0.0/8 via 10.10.2.2 dev eth2 
		10.10.1.0/24 dev eth1  proto kernel  scope link  src 10.10.1.2 
		10.10.2.0/24 dev eth2  proto kernel  scope link  src 10.10.2.1 
		10.10.3.0/24 via 10.10.2.2 dev eth2 
		10.10.4.0/24 dev eth3  proto kernel  scope link  src 10.10.4.1 
		10.10.5.0/24 via 10.10.4.2 dev eth3 
		10.10.5.0/31 via 10.10.4.2 dev eth3 
		172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.1 

	Before above commands routing table of destination:
		default via 172.16.0.1 dev eth0 
		10.0.0.0/8 via 10.10.3.1 dev eth1 
		10.10.3.0/24 dev eth1  proto kernel  scope link  src 10.10.3.2 
		10.10.4.0/31 via 10.10.3.1 dev eth1 
		10.10.4.0/22 via 10.10.5.1 dev eth2 
		10.10.5.0/24 dev eth2  proto kernel  scope link  src 10.10.5.2 
		172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.7 

	After above commands routing table of destination:
		default via 172.16.0.1 dev eth0 
		10.0.0.0/8 via 10.10.3.1 dev eth1 
		10.10.2.0/24 via 10.10.3.1 dev eth1 
		10.10.3.0/24 dev eth1  proto kernel  scope link  src 10.10.3.2 
		10.10.4.0/31 via 10.10.3.1 dev eth1 
		10.10.4.0/24 via 10.10.5.1 dev eth2 
		10.10.4.0/22 via 10.10.5.1 dev eth2 
		10.10.5.0/24 dev eth2  proto kernel  scope link  src 10.10.5.2 
		172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.7 

	Routers routing tables did not affected by above commands

		router1's routing table
			default via 172.16.0.1 dev eth0 
			10.0.0.0/8 via 10.10.2.1 dev eth1 
			10.10.2.0/24 dev eth1  proto kernel  scope link  src 10.10.2.2 
			10.10.3.0/24 dev eth2  proto kernel  scope link  src 10.10.3.1 
			10.10.5.2/31 via 10.10.3.2 dev eth2 
			172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.8 

		router2's routing table
			default via 172.16.0.1 dev eth0 
			10.0.0.0/8 via 10.10.4.1 dev eth1 
			10.10.3.2/31 via 10.10.5.2 dev eth2 
			10.10.4.0/24 dev eth1  proto kernel  scope link  src 10.10.4.2 
			10.10.5.0/24 dev eth2  proto kernel  scope link  src 10.10.5.1 
			172.16.0.0/12 dev eth0  proto kernel  scope link  src 172.17.3.11 


		However after commands that is entered on routers, in  "/etc/sysctl.conf" conf file following change has been made:
			#net.ipv4.ip_forward=1 to -> net.ipv4.ip_forward=1 (commented out)


	Finally to prove that network is configured correctly; below is outputs of the specified "traceroute" commands:

		In broker
			e2259166@b:~$ traceroute 10.10.3.2
			traceroute to 10.10.3.2 (10.10.3.2), 30 hops max, 60 byte packets
			 1  r1-link-1 (10.10.2.2)  6.647 ms  3.622 ms  3.563 ms
			 2  d-link-2 (10.10.3.2)  7.075 ms  10.156 ms  10.132 ms
			e2259166@b:~$ traceroute 10.10.5.2
			traceroute to 10.10.5.2 (10.10.5.2), 30 hops max, 60 byte packets
			 1  r2-link-3 (10.10.4.2)  3.665 ms  6.696 ms  6.654 ms
			 2  d-link-4 (10.10.5.2)  10.517 ms  13.306 ms  13.286 ms

		In destination
			e2259166@b:~$ traceroute 10.10.2.1
			traceroute to 10.10.2.1 (10.10.2.1), 30 hops max, 60 byte packets
			 1  r1-link-2 (10.10.3.1)  6.707 ms  6.671 ms  6.632 ms
			 2  B-link-1 (10.10.2.1)  13.127 ms  13.091 ms  12.976 ms
			e2259166@b:~$ traceroute 10.10.4.1
			traceroute to 10.10.4.1 (10.10.4.1), 30 hops max, 60 byte packets
			 1  r1-link-2 (10.10.3.1)  3.531 ms  6.531 ms  6.466 ms
			 2  B-link-3 (10.10.4.1)  13.258 ms  13.238 ms  13.213 ms

To initiate sending process:

	Firstly broker.py must be executed on b node:
	./broker.py

	Then destination.py script must be executed on d node:
	./destination.py

	Finally source.py script on s node needs to be executed:
	./source.py

	After this final execution source node will read 500KB from "input.txt" file and it will send it to broker node 10 times to be able to finish reading file; on first packet it will send file checksum and file sending process's start time to broker.

	After all data has came to broker; broker will divide the data to 900 byte chunks and send them to destination with proper headers, reliably, multihomed and pipelined.

	After sending process destination will store data (in correct order) to a file named "output.txt" and will calculate the file sending time and check file checksum; it will report whether the file is transferred correctly or not based on checksum comparison.


**For Experiments**

To show network delay for a node following command has been used:
	sudo tc qdisc show dev <adapter_name>

To delete network delay for a node following command has been used:
	sudo tc qdisc del dev <adapter_name> root

To add network delay for experiment following commands has been used:

	FOR 1st FIGURE:
	
		No commands used in s node

		In b:
			For 1st experiment:
				sudo tc qdisc add dev eth2 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%

		In r1:
			For 1st experiment:
				sudo tc qdisc add dev eth1 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%

		In r2:
			For 1st experiment:
				sudo tc qdisc add dev eth1 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%

		In d:
			For 1st experiment:
				sudo tc qdisc add dev eth1 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0.5% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 10% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 20% corrupt 0% duplicate 0% delay 3ms reorder 0% 0%

	FOR 2nd FIGURE:
	
		No commands used in s node

		In b:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%

		In r1:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%

		In r2:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%
		
		In d:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0.2% duplicate 0% delay 3ms reorder 0% 0%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 10% duplicate 0% delay 3ms reorder 0% 0%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 20% duplicate 0% delay 3ms reorder 0% 0%

	FOR 3rd FIGURE:
	
		No commands used in s node

		In b:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
				sudo tc qdisc add dev eth3 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
		
		In r1:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
		
		In r2:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
		
		In d:
			For 1st experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 1% 50%
			For 2nd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 10% 50%
			For 3rd experiment:
				(Assuming previous network delays are deleted)
				sudo tc qdisc add dev eth1 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
				sudo tc qdisc add dev eth2 root netem loss 0% corrupt 0% duplicate 0% delay 3ms reorder 35% 50%
