                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f60805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name = Yavuz Selim Yesilyurt
                            | # ID = 2259166
                            | ##
                            | # Describe how and why you modified the baseline code.
                            | ## 
                            | # I used "iaddq" instruction here, which I implemented in "pipe-full.hcl" file,
                            | # in many places when I increment registers, to make increment operations faster
                            | ##
                            | # In function entrance I constructed a loop which advances with decrementing len 
                            | # by 7 on each loop test for utilization of loop unrolling 7 times. Loop body
                            | # basically retrieves 7 in order values from src and checks if val > 0 for each
                            | # in order value and copies these values to dest in order again.
                            | ##
                            | # Whenever len < 7 in the loop, then loop breaks and starts making its job one by one;
                            | # that is, first it checks if len == 0 and if it's not, it retrieves the value
                            | # of the next item in src and checks for if val > 0. This operation is repeated until
                            | # len = 0 and eventually directed to the "Done" label and returns.
                            | ##
                            | # Also, I tried to be careful against Load-Use Hazards (data dependence), whenever I  
                            | # loaded a register with a value I tried to not to use that register immediately, if 
                            | # possible, I inserted at least 1 instruction in between (loading and usage).
                            | ##
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
                            | 
0x032:                      | ncopy:
0x032: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx 			# len -= 7
0x03c: 728b01000000000000   | 	jl len_lt_7					# if (len < 0) then go to len_lt_7
                            | 								# else fall through to loop for len >= 7
0x045:                      | loop7: 
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8 			# read 1st val from src
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 		# read 2nd val from src
0x059: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10 		# read 3rd val from src
0x063: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11 		# read 4th val from src
0x06d: 6288                 | 	andq %r8, %r8 				# check if 1st val <= 0 
0x06f: 718200000000000000   | 	jle npos1 					# if so, go to npos1
0x078: c0f00100000000000000 | 	iaddq $1, %rax 				# else, count++
                            | 
0x082:                      | npos1:
0x082: 40860000000000000000 | 	rmmovq %r8, (%rsi) 			# deploy 1st val to dest
0x08c: 40960800000000000000 | 	rmmovq %r9, 8(%rsi) 		# deploy 2nd val to dest
0x096: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi) 		# deploy 3rd val to dest
0x0a0: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi) 		# deploy 4th val to dest
0x0aa: 6299                 | 	andq %r9, %r9 				# check if 2nd val <= 0 
0x0ac: 71bf00000000000000   | 	jle npos2					# if so, go to npos2
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x0bf:                      | npos2:
0x0bf: 62aa                 | 	andq %r10, %r10 			# check if 3rd val <= 0 
0x0c1: 71d400000000000000   | 	jle npos3					# if so, go to npos3
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x0d4:                      | npos3:
0x0d4: 50872000000000000000 | 	mrmovq 32(%rdi), %r8 		# read 5th val from src
0x0de: 50972800000000000000 | 	mrmovq 40(%rdi), %r9 		# read 6th val from src
0x0e8: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10 		# read 7th val from src
0x0f2: 62bb                 | 	andq %r11, %r11				# check if 4th val <= 0 
0x0f4: 710701000000000000   | 	jle npos4					# if so, go to npos4
0x0fd: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x107:                      | npos4:
0x107: 40862000000000000000 | 	rmmovq %r8, 32(%rsi) 		# deploy 5th val to dest
0x111: 40962800000000000000 | 	rmmovq %r9, 40(%rsi) 		# deploy 6th val to dest
0x11b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi) 		# deploy 6th val to dest
0x125: 6288                 | 	andq %r8, %r8 				# check if 5th val <= 0
0x127: 713a01000000000000   | 	jle npos5					# if so, go to npos5
0x130: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x13a:                      | npos5:
0x13a: 6299                 | 	andq %r9, %r9				# check if 6th val <= 0
0x13c: 714f01000000000000   | 	jle npos6					# if so, go to npos6
0x145: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x14f:                      | npos6:
0x14f: 62aa                 | 	andq %r10, %r10				# check if 7th val <= 0
0x151: 716401000000000000   | 	jle iter					# if so, go to npos7
0x15a: c0f00100000000000000 | 	iaddq $1, %rax				# else, count++ and fall through
                            | 
0x164:                      | iter:
0x164: c0f73800000000000000 | 	iaddq $56, %rdi 			# increment src by 7 quad
0x16e: c0f63800000000000000 | 	iaddq $56, %rsi 			# increment dest by 7 quad
0x178: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx 			# len -= 7
0x182: 754500000000000000   | 	jge loop7 					# check if len >= 0
                            | 
0x18b:                      | len_lt_7:  
0x18b: c0f20600000000000000 | 	iaddq $6, %rdx          	# return len to the right value
                            | 
0x195:                      | Remainder1:
0x195: 723100000000000000   | 	jl     0x31           		# return if len == 0
0x19e: 50870000000000000000 | 	mrmovq (%rdi), %r8	     	# read 1st val from src
0x1a8: 50970800000000000000 | 	mrmovq 8(%rdi), %r9    		# read 2nd val from src
0x1b2: 40860000000000000000 | 	rmmovq %r8, (%rsi)     		# deploy 1st val to dest
0x1bc: 6288                 | 	andq   %r8, %r8       		# check if 1st val <= 0
0x1be: 71d101000000000000   | 	jle    Remainder2           # if so, go to Remainder2
0x1c7: c0f00100000000000000 | 	iaddq  $1, %rax         	# else, count++ and fall through
                            | 
0x1d1:                      | Remainder2: 
0x1d1: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        	# len-- 
0x1db: 723100000000000000   | 	jl     0x31             	# return if len == 0
0x1e4: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	    	# deploy 2nd val to dest
0x1ee: 6299                 | 	andq   %r9, %r9       		# check if 2nd val <= 0
0x1f0: 710302000000000000   | 	jle    Remainder3           # if so, go to Remainder3 
0x1f9: c0f00100000000000000 | 	iaddq  $1, %rax         	# else, count++ and fall through
                            | 
0x203:                      | Remainder3: 
0x203: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        	# len-- 
0x20d: 723100000000000000   | 	jl     0x31             	# return if len == 0
0x216: 50871000000000000000 | 	mrmovq 16(%rdi), %r8	   	# read 3rd val from src
0x220: 50971800000000000000 | 	mrmovq 24(%rdi), %r9		# read 4th val from src
0x22a: 40861000000000000000 | 	rmmovq %r8, 16(%rsi) 	  	# deploy 3rd val to dest
0x234: 6288                 | 	andq   %r8, %r8        		# check if 3rd val <= 0
0x236: 714902000000000000   | 	jle    Remainder4           # if so, go to Remainder4 
0x23f: c0f00100000000000000 | 	iaddq  $1, %rax         	# else, count++ and fall through
                            | 
0x249:                      | Remainder4: 
0x249: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        	# len--
0x253: 723100000000000000   | 	jl     0x31	      			# return if len == 0 
0x25c: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)   		# deploy 4th val to dest
0x266: 6299                 | 	andq   %r9, %r9       		# check if 4th val <= 0
0x268: 717b02000000000000   | 	jle    Remainder5           # if so, go to Remainder5
0x271: c0f00100000000000000 | 	iaddq  $1, %rax 			# else, count++ and fall through
                            | 
0x27b:                      | Remainder5: 
0x27b: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        	# len--
0x285: 723100000000000000   | 	jl     0x31             	# return if len == 0 
0x28e: 50872000000000000000 | 	mrmovq 32(%rdi), %r8   		# read 5th val from src
0x298: 50972800000000000000 | 	mrmovq 40(%rdi), %r9		# read 6th val from src
0x2a2: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)   		# deploy 5th val to dest
0x2ac: 6288                 | 	andq   %r8, %r8       		# check if 5th val <= 0
0x2ae: 71c102000000000000   | 	jle    Remainder6           # if so, go to Remainder6
0x2b7: c0f00100000000000000 | 	iaddq $1, %rax 				# else, count++ and fall through
                            | 
0x2c1:                      | Remainder6: 
0x2c1: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        	# len--
0x2cb: 723100000000000000   | 	jl     0x31             	# return if len == 0 
0x2d4: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)   		# deploy 6th val to dest
0x2de: 6299                 | 	andq   %r9, %r9       		# check if 6th val <= 0
0x2e0: 713100000000000000   | 	jle    0x31             	# if so, go to Done
0x2e9: c0f00100000000000000 | 	iaddq $1, %rax 				# else, count++ and fall through 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2f3:                      | Done:
0x2f3: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2f4:                      | End:
                            | #/* $end ncopy-ys */
0x2f4:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2f8:                      | 	.align 8
0x2f8:                      | src:
0x2f8: ffffffffffffffff     | 	.quad -1
0x300: 0200000000000000     | 	.quad 2
0x308: 0300000000000000     | 	.quad 3
0x310: fcffffffffffffff     | 	.quad -4
0x318: fbffffffffffffff     | 	.quad -5
0x320: 0600000000000000     | 	.quad 6
0x328: f9ffffffffffffff     | 	.quad -7
0x330: f8ffffffffffffff     | 	.quad -8
0x338: f7ffffffffffffff     | 	.quad -9
0x340: f6ffffffffffffff     | 	.quad -10
0x348: 0b00000000000000     | 	.quad 11
0x350: 0c00000000000000     | 	.quad 12
0x358: 0d00000000000000     | 	.quad 13
0x360: 0e00000000000000     | 	.quad 14
0x368: 0f00000000000000     | 	.quad 15
0x370: f0ffffffffffffff     | 	.quad -16
0x378: 1100000000000000     | 	.quad 17
0x380: 1200000000000000     | 	.quad 18
0x388: edffffffffffffff     | 	.quad -19
0x390: 1400000000000000     | 	.quad 20
0x398: ebffffffffffffff     | 	.quad -21
0x3a0: 1600000000000000     | 	.quad 22
0x3a8: e9ffffffffffffff     | 	.quad -23
0x3b0: e8ffffffffffffff     | 	.quad -24
0x3b8: e7ffffffffffffff     | 	.quad -25
0x3c0: 1a00000000000000     | 	.quad 26
0x3c8: e5ffffffffffffff     | 	.quad -27
0x3d0: e4ffffffffffffff     | 	.quad -28
0x3d8: e3ffffffffffffff     | 	.quad -29
0x3e0: e2ffffffffffffff     | 	.quad -30
0x3e8: e1ffffffffffffff     | 	.quad -31
0x3f0: e0ffffffffffffff     | 	.quad -32
0x3f8: dfffffffffffffff     | 	.quad -33
0x400: deffffffffffffff     | 	.quad -34
0x408: ddffffffffffffff     | 	.quad -35
0x410: 2400000000000000     | 	.quad 36
0x418: 2500000000000000     | 	.quad 37
0x420: 2600000000000000     | 	.quad 38
0x428: 2700000000000000     | 	.quad 39
0x430: 2800000000000000     | 	.quad 40
0x438: d7ffffffffffffff     | 	.quad -41
0x440: d6ffffffffffffff     | 	.quad -42
0x448: 2b00000000000000     | 	.quad 43
0x450: d4ffffffffffffff     | 	.quad -44
0x458: 2d00000000000000     | 	.quad 45
0x460: 2e00000000000000     | 	.quad 46
0x468: 2f00000000000000     | 	.quad 47
0x470: 3000000000000000     | 	.quad 48
0x478: cfffffffffffffff     | 	.quad -49
0x480: ceffffffffffffff     | 	.quad -50
0x488: cdffffffffffffff     | 	.quad -51
0x490: ccffffffffffffff     | 	.quad -52
0x498: cbffffffffffffff     | 	.quad -53
0x4a0: caffffffffffffff     | 	.quad -54
0x4a8: c9ffffffffffffff     | 	.quad -55
0x4b0: 3800000000000000     | 	.quad 56
0x4b8: 3900000000000000     | 	.quad 57
0x4c0: 3a00000000000000     | 	.quad 58
0x4c8: 3b00000000000000     | 	.quad 59
0x4d0: 3c00000000000000     | 	.quad 60
0x4d8: 3d00000000000000     | 	.quad 61
0x4e0: 3e00000000000000     | 	.quad 62
0x4e8: 3f00000000000000     | 	.quad 63
0x4f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x500:                      | 	.align 16
0x500:                      | Predest:
0x500: fadebc0000000000     | 	.quad 0xbcdefa
0x508:                      | dest:
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700:                      | Postdest:
0x700: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x708:                      | .align 8
                            | # Run time stack
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
0x740: 0000000000000000     | 	.quad 0
0x748: 0000000000000000     | 	.quad 0
0x750: 0000000000000000     | 	.quad 0
0x758: 0000000000000000     | 	.quad 0
0x760: 0000000000000000     | 	.quad 0
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
                            | 
0x788:                      | Stack:
